https://blog.postman.com/how-to-create-a-rest-api-with-node-js-and-express/

We commonly use express to do either 2 things 
To Setup API 

By API we simply mean setting up an HTTP interface to interact with our data.
Data is commonly handled in JSON format. To send back a response we use the res.json() method.

OR To setup templates with SSR (Server Side Rendering)

To send back a response we use res.render() - render a template

In a sense, the backend can be considered to be "full of APIs" because a significant part of its role is to 
define and implement these interfaces. When building the backend, developers focus on creating APIs to 
define the routes, request parameters, and data formats that the front end can utilize.

The API endpoints are essentially the URLs that the front end can access to perform specific actions or 
retrieve data. For example, a backend API for a task management application might include endpoints such as:

GET /tasks - to retrieve a list of tasks
POST /tasks - to create a new task
PUT /tasks/:id - to update a specific task
DELETE /tasks/:id - to delete a specific task

These endpoints are defined and implemented in the backend to handle the corresponding operations when the 
front end makes requests to these URLs. The backend processes the incoming requests, interacts with the 
database or other services as necessary, and generates the appropriate responses.

Additionally, different parameters can be defined to customize the behavior of the API, such as query 
parameters for filtering data, request body parameters for sending data to the server, or URL parameters 
for identifying specific resources.

Endpoints in a backend application can be thought of as URLs that the frontend can send requests to 
perform various actions or retrieve data. These endpoints can take the form of URLs with 
optional query strings and additional parameters. Here's a breakdown of these concepts:

URLs as Endpoints:
Each endpoint corresponds to a specific URL on the backend server. For example, a typical endpoint might
look like https://api.example.com/users or https://api.example.com/posts/123, where the address represents 
the location of a specific resource or action on the server.

Query Strings:
Endpoints can include query strings, which are additional parameters appended to the URL to modify the 
requested data. For instance, in the URL https://api.example.com/users?role=admin, "role=admin" is a query 
string that specifies a filter or criteria for the requested data. The backend server can parse this query 
string and use it to tailor the response accordingly.

Additional Parameters:
In addition to query strings, endpoints can also accept additional parameters through the request body or 
as part of the URL path. For example, in the URL https://api.example.com/posts/123/comments, "123" is a 
parameter indicating a specific post, while "comments" signifies a sub-resource related to the post.

By leveraging endpoints with URLs, query strings, and additional parameters, the backend server can handle 
a wide range of operations and provide the frontend with the flexibility to request specific data or perform 
actions tailored to the requirements of the application.

